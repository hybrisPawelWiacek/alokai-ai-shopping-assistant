### Commerce
# Commercetools config

# Unique identifier of your commercetools project.
# See https://docs.alokai.com/integrations/commercetools/getting-started/configuration#creating-an-api-client
COMMERCETOOLS_PROJECT_KEY=vsf-generic-ent-demo
# The client ID of the commercetools API client.
# Alokai application will use this API client to access public actions, e.g. fetching products, categories, etc.
# See https://docs.alokai.com/integrations/commercetools/getting-started/configuration#creating-an-api-client
COMMERCETOOLS_CLIENT_ID=FwM55bKS99nv7uIQ2J6hzpFf
# The client secret of the commercetools API client.
# Alokai application will use this API client to access public actions, e.g. fetching products, categories, etc.
# See https://docs.alokai.com/integrations/commercetools/getting-started/configuration#creating-an-api-client
COMMERCETOOLS_CLIENT_SECRET=Hdn4udyyUPQuX8cx5qv4VDVNlPSVtIyv
# The client ID of the commercetools server API client. 
# Alokai application will use this API client to generate access tokens used by the Server Middleware to perform operations requiring higher permissions than regular guests and customers should have.
# See https://docs.alokai.com/integrations/commercetools/getting-started/configuration#serverapi-required
COMMERCETOOLS_CLIENT_ID_SERVER=BU98jHxl3e2D4uHMVyOyWQ0e
# The client secret of the commercetools server API client. 
# Alokai application will use this API client to generate access tokens used by the Server Middleware to perform operations requiring higher permissions than regular guests and customers should have.
# See https://docs.alokai.com/integrations/commercetools/getting-started/configuration#serverapi-required
COMMERCETOOLS_CLIENT_SECRET_SERVER=axW7tbPwxhdlIFTWYVu8ktxGIGYaXZYn
# The Region of a commercetools Project or Deployment.
# See https://docs.commercetools.com/connect/common-types#region
COMMERCETOOLS_REGION=europe-west1.gcp

# Bigcommerce config

# The client ID of the Bigcommerce API client.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-an-api-account
BIGCOMMERCE_API_CLIENT_ID=pcj59hx6k0gzwmzisp5v693woed6omn
# The client secret of the Bigcommerce API client.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-an-api-account
BIGCOMMERCE_API_CLIENT_SECRET=7e30bab7920f8b5785c0b69e3df29bab72f3db6d78dca5689d63c7455fcd9c15
# The API URL of the Bigcommerce store.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-an-api-account
BIGCOMMERCE_API_URL=https://api.bigcommerce.com/stores/s4zoaccduv/v3/
# The API access token of the Bigcommerce API client.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-an-api-account
BIGCOMMERCE_API_ACCESS_TOKEN=10g4w8dxqdjroezi0zm2phlptmvnijl
# The store hash of the Bigcommerce store. You can retrieve the store hash from the 'API Path' field with the following structure https://api.bigcommerce.com/stores/<store-hash>/v3/
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-an-api-account
BIGCOMMERCE_STORE_ID=s4zoaccduv
# The guest token of the Bigcommerce store. The guest token is used to authenticate unauthenticated users.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#guest-token
BIGCOMMERCE_STORE_GUEST_TOKEN=rxye5j2ium
# The channel ID of the Bigcommerce store. The default channel generated by Bigcommerce has the ID 1. It is recommended to create a new channel for production application.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-a-channel-site
BIGCOMMERCE_CHANNEL_ID=1435606

# Sapcc config

# Full OAuth server uri (e.g. https://<your-sap-api>/authorizationserver/ ).
# See https://docs.alokai.com/integrations/sapcc/getting-started/quick-start
SAPCC_OAUTH_URI=https://api.c1jvi8hu9a-vsfspzooa1-d1-public.model-t.cc.commerce.ondemand.com/authorizationserver/
# Client Id of OAuth Client.
# See https://docs.alokai.com/integrations/sapcc/getting-started/quick-start
SAPCC_OAUTH_CLIENT_ID=vuestorefront
# Client Secret of OAuth Client.
# See https://docs.alokai.com/integrations/sapcc/getting-started/quick-start
SAPCC_OAUTH_CLIENT_SECRET=fL_dxf&jq=3&G1Z8[s($@vjHK
# Endpoint for retrieving and refreshing customer/application tokens (e.g. /oauth/token ).
# See https://docs.alokai.com/integrations/sapcc/getting-started/quick-start
SAPCC_OAUTH_TOKEN_ENDPOINT=/oauth/token
# Endpoint for revoking customers tokens (e.g. /oauth/revoke ).
# See https://docs.alokai.com/integrations/sapcc/getting-started/quick-start
SAPCC_OAUTH_TOKEN_REVOKE_ENDPOINT=/oauth/revoke
# Public API url for SAPCC.
# See https://docs.alokai.com/integrations/sapcc/getting-started/quick-start#middleware
SAPCC_API_URI=https://api.c1jvi8hu9a-vsfspzooa1-d1-public.model-t.cc.commerce.ondemand.com/occ/v2/
# (Optional) Public API url for SAPCC media. In a headless response, SAPCC returns media urls with relative paths, in some cases it is required to prepend the media path with host e.g when serving raw media without any media management service, like Cloudinary.
# The value should be the same as SAPCC_API_URI host if not provided.
# SAPCC_MEDIA_HOST=https://api.c1jvi8hu9a-vsfspzooa1-d1-public.model-t.cc.commerce.ondemand.com/

## SFCC config

# The client ID for the Salesforce Commerce API (SCAPI) application.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#scapiclientid
SFCC_OCAPI_CLIENT_ID=f928e5d2-aaff-4870-92e9-4c955b730f07
# The secret of the client used for the Salesforce B2C Commerce Open Commerce API (OCAPI) application.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#scapiclientsecret
SFCC_OCAPI_CLIENT_SECRET="RAW6bau5egb*qtv6rat"
# The version of the Salesforce B2C Commerce OCAPI.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#ocapiversion
SFCC_OCAPI_VERSION=23_1
# The organization ID of the Salesforce B2C Commerce instance.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#organizationid
SFCC_ORGANIZATION_ID=f_ecom_zynf_001
# The short code of the Salesforce B2C Commerce instance.
# https://docs.alokai.com/integrations/sfcc/getting-started/configuration#origin
SFCC_ORIGIN=https://zynf-001.dx.commercecloud.salesforce.com
# The client ID for the Salesforce Commerce API (SCAPI) application.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#scapiclientid
SFCC_SCAPI_CLIENT_ID=682e5fe7-99c9-4da7-9b51-2647a44e0317
# The secret of the client used for the Salesforce B2C Commerce Open Commerce API (OCAPI) application.
# https://docs.alokai.com/integrations/sfcc/getting-started/configuration#scapiclientsecret
SFCC_SCAPI_CLIENT_SECRET="wpj8dmz3mun*rwr*TRH"
# The storefront's short code. The short code is an eight-character string that is assigned to a realm for routing purposes.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#shortcode
SFCC_SHORT_CODE=kv7kzm78
# The site ID for the storefront. This is the name of the site (sometimes called a “channel”) for which you want to access data.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#siteid
SFCC_SITE_ID=RefArch
# The client ID of a private SLAS client that will be used for customer authentication through SCAPI.
# See https://docs.alokai.com/integrations/sfcc/getting-started/configuration#slasclientid
SFCC_SLAS_CLIENT_ID=44f8dd21-4fae-48e1-9525-90e3623f29a4
# The client secret of a private SLAS client that will be used for customer authentication through SCAPI
# See The client secret of a private SLAS client that will be used for customer authentication through SCAPI
SFCC_SLAS_CLIENT_SECRET=0xYYSiMYLun4TH4ehdg1FM2VAZaeLSAH9wjvUarfmtM
# The base URL of the Alokai middleware application used to generate the redirect URL passed to SLAS.
# See https://docs.alokai.com/middleware/guides/getting-started#running-the-application
SFCC_MIDDLEWARE_ORIGIN=http://localhost:4000

## Magento config

# The base URL of the Magento store.
# See https://experienceleague.adobe.com/en/docs/commerce-admin/stores-sales/site-store/store-urls
MAGENTO_BASE_URL=https://magento2-instance.vuestorefront.io/
# The GraphQL endpoint of the Magento API. Available with "http://<commerce-server>/graphql" endpoint.
# See https://developer.adobe.com/commerce/webapi/graphql/
MAGENTO_GRAPHQL_URL=https://magento2-instance.vuestorefront.io/graphql

## Algolia
# The search-only API key of the Algolia account. It is not recommended to use the admin API key in the client application.
# See https://www.algolia.com/doc/guides/security/api-keys/
ALGOLIA_API_KEY=1b0b07180aff10141e65c9ac737aa176
# The value of Application ID you can find on API Keys page in Algolia's Dashboard.
# See https://support.algolia.com/hc/en-us/articles/11040113398673-Where-can-I-find-my-application-ID-and-the-index-name
ALGOLIA_APP_ID=0O05NLKTZ1

## Multistore

# The flag that enables/disables the multistore feature that allows different store configurations to coexist within a single Storefront and Server Middleware instance.
# See https://docs.alokai.com/unified-data-layer/features/advanced/multi-store-configuration
IS_MULTISTORE_ENABLED=false

### BC
# Bigcommerce Multistore example channel ID for the first store.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-a-channel-site
MULTISTORE1_CHANNEL_ID=1
# Bigcommerce Multistore example channel ID for the second store.
# See https://docs.alokai.com/bigcommerce/setup/configuring-bigcommerce.html#create-a-channel-site
MULTISTORE2_CHANNEL_ID=1_435_606

### CT
# Commercetools Multistore example channel for the first store.
# See https://docs.commercetools.com/api/projects/channels
MULTISTORE1_CHANNEL=""
# Commercetools Multistore example channel for the second store.
# See https://docs.commercetools.com/api/projects/channels
MULTISTORE2_CHANNEL=""

### SFCC
# Salesforce Commerce Multistore example site ID for the first store.
MULTISTORE1_SITE_ID=RefArch
# Salesforce Commerce Multistore example site origin for the first store.
MULTISTORE1_ORIGIN=https://zynf-001.dx.commercecloud.salesforce.com
# Salesforce Commerce Multistore example site ID for the second store.
MULTISTORE2_SITE_ID=RefArch
# Salesforce Commerce Multistore example site origin for the second store.
MULTISTORE2_ORIGIN=https://zynf-001.dx.commercecloud.salesforce.com

### SAPCC
# SAPCC Multistore example site ID for the first store.
MULTISTORE1_BASE_SITE_ID="apparel-uk"
# SAPCC Multistore example catalog ID for the first store.
MULTISTORE1_CATALOG_ID="apparelProductCatalog"
# SAPCC Multistore example site ID for the second store.
MULTISTORE2_BASE_SITE_ID="electronics"
# SAPCC Multistore example catalog ID for the second store.
MULTISTORE2_CATALOG_ID="electronicsProductCatalog"

### Magento
# Magento Multistore example base URL for the first store.
MULTISTORE1_BASE_URL=""
# Magento Multistore example base URL for the second store.
MULTISTORE2_BASE_URL=""

### CMS Mock
# Configure CMS Mock environment that allows you to use the CMS Mock Middleware API. The value should match the name of the commerce platform you are using (e.g. "bigcommerce", "commercetools", "magento", "sapcc", "sfcc").
CMS_MOCK_ENVIRONMENT=sapcc-b2b

# cms-contentful module
CNTF_TOKEN=q0hrMDSsEfVtjGYmlzbl4YFdDbk9YPVqN0JE5XtyZWY
CNTF_SPACE=d4wizuml8p4u
CNTF_ENVIRONMENT=sapcc-b2bv2